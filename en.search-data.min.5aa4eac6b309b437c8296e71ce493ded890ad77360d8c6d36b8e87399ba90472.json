[{"id":0,"href":"/post/hugo/","title":"Hugo 笔记","section":"Posts","content":"Hugo #  1. 安装Hugo #   ubantu系统 下载Hugo   Hugo官方下载\n # 第一种方法 apt-get install hugo # 第二种方法 # 1. 切换到家目录 cd ~ # 使用wget下载hugo wget https://github.com/gohugoio/hugo/releases/download/v0.108.0/hugo_0.108.0_linux-arm64.deb # 安装dpkg包 sudo dpkg -i hugo*.deb 检查是否安装成功  hugo version # 打印出当前的版本 运行hugo，需要安装hugo主题，但获取hugo主题，还需要克隆hugo主题的git存储库，因此需要安装git来获取  sudo apt-get update sudo apt-get install git 测试git是否安装  git ​\t出现结果如下，则安装成功\n​\t在家目录下创建blog站点，站点名为myblog  cd ~ hugo new site myblog #myblog是项目名 myblog的目录如下  myblog ├── archetypes │ └── default.md ├── assets ├── config.toml # 博客站点的配置文件 ├── content\t# 博客文章所在的目录\t ├── data\t# 存放数据文件 ├── layouts\t# 网站布局 ├── public\t├── static\t# 静态内容 └── themes\t# 博客主题  hugo目录结构部分详解\n config.toml\t站点全局的参数配置文件 archetypes Hugo的markdown文件中前置数据Front Matter定义的结构，默认使用的是default.md文件，可以自定义，然后在config.toml中指定自定义的结构文件，打开default.md文件。 content 存放网页内容的目录，编写的markdown文件都存放在此目录 data 用来存放数据文件，一般是json文件 layouts 存放自定义的模板文件，Hugo优先使用layouts目录下的模板，未发现再去themes目录下查找 static 存放静态文件，比如css、js、img等文件目录，Hugo在渲染时，会直接将static目录下的文件直接复制到public目录下，不会做任何渲染。 themes 存放网站主题，可以下载多个主题，themes目录下的每个子目录代表了一个主题 public文件，这个文件比较重要，当使用hugo命令时，生成的所有静态的文件都存放于此，后面hugo部署到nginx以及远程部署到Github Page时，都需要用到这个目录   在站点目录下初始化git存储库  cd ~/myblog git init 配置git的名称和电子邮件地址  git config --global user.name \u0026quot;Your Name\u0026quot;\rgit config --global user.email \u0026quot;user@email.com\u0026quot;\r安装主题   官方主题下载：hugo主题\n ​\t在myblog目录，将要下载的主题克隆到themes目录下\n# 将 book主题 克隆到这 themes/book 下 git clone https://github.com/alex-shpak/hugo-book themes/book 将主题配置到配置文件中  echo 'theme=\u0026quot;book\u0026quot; '\u0026gt;\u0026gt; config.toml\r# 或者在config.toml下修改 theme=\u0026quot;book“\r新建页面文章  # 在content/post 目录下生成test.md hugo new post/test.md # test.md内容 --- title: \u0026#34;My First Post\u0026#34; date: 2022-12-13T15:50:03+08:00 draft: false --- # Test  ## This is my first post on the site.  \u0026gt; welcome  生成的 文件放在`myblog/context目录下\n ​\tdraft ：如果设置为true，则标记页面未 准备好发布，启动hugo时需加 -D参数，才可以显示该文章内容\n​\t将draft设置为false,则无须如此。\n启用hugo服务器  hugo本身可以作为web服务器，输入以下命令\n# 在本地启动hugo，显示网站页面，但不显示草稿即draft为true的文章 hugo server 启用草稿的情况下，启用服务器要使用以下命令：\nhugo server -D\r 其他选项  -t 选定的主题 --bind 指定我们希望在所有接口上使该站点可用 --baseUrl 设置网站的域名或IP地址 -D 等价于 draft=true 表示显示草稿的页面 -F 表示指定内容的时间 # 例子 hugo server --bind=0.0.0.0 --baseUrl=http://your_domain_or_IP/ -D -F  若想修改baseUrl，到config.toml ，找到baseURL = ' http://本地ip或localhost /'进行修改\n  本地结果显示\n在本地上可看到刚才写的文章。\n  使用hugo建立网站\n  hugo可以获取Markdown文件，应用配置和主题中定义的设置，会显示实际HTML页面。要获取网站的静态文件，只需输入：\nhugo\r使用后将生成自己目录下的所有页面，并将所有呈现的内容放到public目录中。因此将此目录的内容传输到Web服务器以部署和提供内容。\n **注意：**每次构建时，public不会清理原有目录下的文件。这意味着过去的内容可能保留在公共目录中。因此在每次构建后要先删除public目录，以便可以重新创建内容。\n 2. 配置Hugo #  2.1 配置config.toml文件 #  #在config.toml文件下，为主题\u0026#34;theme-hugo-book\u0026#34; 做主要的配置  # 指定主题，指定后每次启用hugo server 时就不用再指定主题了即--theme=\u0026#34;~\u0026#34;选项可省略 theme=\u0026#34;book\u0026#34; # 配置参数 [params] # 指定主题的颜色： light,dark 或者 auto BookTheme = \u0026#39;auto\u0026#39; # 控制页面右侧的目录可见性。 BookToC = true # 指定要呈现为菜单的内容部分，*表示所有的文件，也可以指定的目录\u0026#34;post\u0026#34;等 BookSection = \u0026#39;*\u0026#39; # 启用弹性搜索功能  BookSearch = true 2.2 Page Configuration #  # 设置页面权重以重新排列文件树菜单中的项目 weight = 10 # （可选）设置“false”以在页面中隐藏 ToC bookToC = true # （可选）设置为 \u0026#39;false\u0026#39; 以从搜索索引中排除页面。 bookSearchExclude = true # （可选）在菜单中为此页面设置显式 href 属性（如果未设置 BookMenuBundle） bookHref = \u0026#39;\u0026#39; 3. 在Nginx下部署hugo #   安装nginx  sudo apt-get install nginx 查看nginx状态，如果没启用nginx服务，则启用服务  systemctl status nginx # 或者service nginx status systemctl start nginx 使用hugo命令生成静态文件，并且将其部署到nginx网站的挂载点，使其显出在web服务器上  hugo cd public # 删除nginx网站下的文件 sudo rm -rf /var/www/html/* # 将hugo生成的静态文件部署到nginx上 sudo cp -r * /var/www/html/ 重启nginx服务  systemctl restart nginx 在本次测试访问  4. 将个人博客部署到远程服务器Github #  4.1 新建一个新仓库 #  仓库地址的填写格式为 用户名小写.github.io\n 可通过http://name.github.io访问自己的博客。\n 4.2 使用hugo生成静态网页 #  hugo --baseUrl=\u0026#34;https://yhs-coder.github.io\u0026#34; # --baseUrl=\u0026#34;https://yhs-coder.github.io\u0026#34; 指定Github Page地址,不是仓库的地址 4.3 上传到Github #   在public文件夹下初始化git存储库  cd public git init  将所有文件添加进去  git add *  提交  git commit -m \u0026#39;first commit\u0026#39;  本地仓库（public文件夹）与远程仓库关联：  # 分支重命名为codes git branch -M codes # 第一种：使用ssh方式远程添加仓库（选择这种）添加的是ssh链接！！！ git remote add origin git@github.com:yhs-coder/yhs-coder.github.io.git # 第二种：使用https方式: git remote add origin https://github.com/yhs-coder/yhs-coder.github.io.git  相关知识：\n# 添加远程分支 git remote add origin ssh/https链接 # 删除远程分支 git remote rm origin # 查看远程仓库的具体信息 git remote show origin #查看远程仓库的数量 git remote -v # 指定仓库和分支，而git push只是他的简写，并且没有指定仓库和分支 git push origin master   将博客推送到远程仓库，即将代码推送到远程仓库，输入以下命令，用于保存密码  # git config --global credential.helper store # 推送到上 git push -u origin codes  可能会出现这个问题：git@github.com: Permission denied (publickey). fatal: 无法读取远程仓库。请确认您有正确的访问权限并且仓库存在。\n**原因：**没有在github服务器设置ssh_key\n解决方法：\n（1）首先查看主目录下是否有.ssh目录，如果没有，则通过以下命令，创建SSH Key\nssh-keygen -t rsa -C \u0026#34;user@email.com\u0026#34; # user@email.com是自己github上的邮箱 一路使用默认（不用输入啥）回车。生成的ssh文件目录如下：\nEnter file in which to save the key (/home/do_myself/.ssh/id_rsa): \n在生成的.ssh目录里，id_rsa是私钥， id_rsa.pub是公钥。\n（2）在Github中添加私钥\n点击头像，点击setting, 找到SSH and GPG keys，“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，此时就完成了SSH账户。\n（3）打开终端，输入以下命令，让本地的git仓库和的ssh key 关联\nssh-add \u0026#34;/home/do_myself/.ssh/id_rsa\u0026#34; # ssh-add \u0026#34;id_rsa的文件地址\u0026#34; 此时就可以将本地库的内容上传到远程Github上的仓库啦！\ngit push origin codes 解决！\n 4.4 访问GIthub Pages上的博客 #  4.5 上传新的文章到Github\ncd public # 删除所有饿文件 rm -rf * # 提交删除的文件 git rm * git commit -m \u0026#34;上传hugo笔记\u0026#34; git push origin codes #重新生成新的Hugo静态文件 cd ../ hugo --baseUrl=\u0026#34;https://yhs-coder.github.io\u0026#34; cd public git add * git push origin codes # finish! 5. 写文章的利器 #  Github+typora+picgo 三剑客 #    在Github上创建一个仓库，充当存放markdown笔记图片的图床\n  接着在上生成私人令牌token, 在picgo进行相关配置，使二者关联\n  在typora中，点击文件中的偏好设置，配置如下\n  这样就可以直接插入图片，图片一键上传到远程图床上，不用每次手动将图片放到static/img的路径而苦恼，一路丝滑地写文章啦！\n"},{"id":1,"href":"/post/test/","title":"My First Post","section":"Posts","content":"Test #  This is my first post on the site. #   welcome\n "}]